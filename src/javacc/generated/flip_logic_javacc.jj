/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. flip_logic_javacc.jj */
/*@egen*/options {
  /* JavaCC */
  CACHE_TOKENS = true;              // Cache multiple tokens for performance.
  CHOICE_AMBIGUITY_CHECK = 5;       // Lookahead tokens to check for ambiguity. Rules of form "A | B | ...".
  FORCE_LA_CHECK = true;            // Force ambiguity check for all lookahead values.
  LOOKAHEAD = 1;                    // Set lookahead to a, as in LL(a).
  OTHER_AMBIGUITY_CHECK = 10;       // Lookahead tokens to check for ambiguity. Rules of form "(A)*", "(A)+", and "(A)?".
  OUTPUT_DIRECTORY = "generated";                                                      
                        

              
                                                                                                     
                                                                           
                                                                                                                                                       
                                // Insert jjtAccept.

  /* JavaCC and JJTree */
  JDK_VERSION = "11";
  STATIC = false;
}
/*
    Class definitions. Included in generated parser.
*/
PARSER_BEGIN(FlipParser)
package javacc.generated;
import java.io.File;
import java.io.Reader;
import java.io.IOException;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import javacc.util.TreePrinter;import javacc.visitors.FixExpressionsVisitor;import javacc.visitors.PrintingVisitor;import javacc.visitors.TypeCheckerVisitor;import javacc.visitors.codegeneration.CodeGenerationVisitor;import org.apache.log4j.Logger;

public class FlipParser/*@bgen(jjtree)*/implements FlipParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTFlipParserState jjtree = new JJTFlipParserState();

/*@egen*/
  private static final Logger logger = Logger.getLogger(FlipParser.class);
  public static void main(String[] args) {
    long startTime = System.nanoTime();
    try {
      String filename = System.getProperty("user.dir") + File.separator + "src" + File.separator + "javacc" + File.separator + "test2.txt";
      Reader reader = new InputStreamReader(new FileInputStream(filename), StandardCharsets.US_ASCII);
      FlipParser p = new FlipParser(reader);

      try {
        SimpleNode node = p.prog();
        node.jjtAccept(new FixExpressionsVisitor(), null);
        node.jjtAccept(new TypeCheckerVisitor(), null);
        node.jjtAccept(new CodeGenerationVisitor(), null);

        float endTimeSeconds = ((float)(System.nanoTime() - startTime)) / 1000000000F;
        System.out.format("Compiling this FLIP program took %.1f seconds.", endTimeSeconds);
//        TreePrinter.printTree(node, "");
      } catch (ParseException e) {
        e.printStackTrace();
        logger.error("Failed to parse because:", e);
      }
    } catch (IOException e) {
      e.printStackTrace();
      logger.error("An IOException occurred while trying to parse the file", e);
    }
  }
}
PARSER_END(FlipParser)
/*
    ==============================================================================================
    Token (and skip) definitions.
    ==============================================================================================
*/
SKIP : {
  " "                                                               // Spaces.
  |  "\t"                                                           // Tabs.
  |  "\n"                                                           // Line feed.
  |  "\r"                                                           // Carriage return.
  |  <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>                  // Line comments.
  |  <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">     // Block comments.
}

TOKEN : {
  <SETUP: "Setup" > |
  <STAGE: "Stage" > |
  <TO: "to" > |
  <CONDITION: "Condition" > |
  <ACTION: "Action" > |
  <FUNCTION: "Function" > |
  <OPTION: "Option" > |

  // Punctuation.
  <SEMICOLON: ";" > |
  <COMMA: "," > |
  <LPAREN : "(" > |
  <RPAREN : ")" > |
  <LBRACKET: "[" > |
  <RBRACKET: "]" > |
  <LBRACE: "{" > |
  <RBRACE: "}" > |
  <COLON: ":" > |
  <RANGE: ".." > |

  // Types.
  <NUMBER: "0" | ["1"-"9"] (["0"-"9"])* > |
  <TEXT: "\""  ("\\" ("\\" | "n" | "r" | "\"") | ~["\\","\n","\r","\""] )* "\"" > |
  <PLAYER_TYPE: "Player" > |
  <NUMBER_TYPE: "Number" > |
  <CARD_TYPE: "Card" > |
  <SUIT_TYPE: "Suit" > |
  <RANK_TYPE: "Rank" > |
  <SEQUENCE_TYPE: "Sequence" > |
  <PILE_TYPE: "Pile" > |
  <BOOLEAN_TYPE : "Boolean" > |
  <TEXT_TYPE : "Text" > |
  <TRUE: "true" > |
  <FALSE: "false" > |

  <PLAYER_COUNT: "PlayerCount"> |
  <PLAYER_DEF: "DefinePlayer"> |
  <PILE_DEF: "DefinePiles"> |

  // Card Literals
  <OF: "of" > |
  <SPADES:   "spades" >   |
  <CLUBS:    "clubs" >    |
  <HEARTS:   "hearts" >   |
  <DIAMONDS: "diamonds" > |
  <ACE:   "ace" >   |
  <TWO:   "two" >   |
  <THREE: "three" > |
  <FOUR:  "four" >  |
  <FIVE:  "five" >  |
  <SIX:   "six" >   |
  <SEVEN: "seven" > |
  <EIGHT: "eight" > |
  <NINE:  "nine" >  |
  <TEN:   "ten" >   |
  <JACK:  "jack" >  |
  <QUEEN: "queen" > |
  <KING:  "king" >  |

  // Operators.
  <AND: "and" > |
  <OR: "or" > |
  <XOR: "xor" > |
  <ASSIGN: ":=" > |
  <EQUALS: "=" > |
  <LESS_THAN: "<" > |
  <LESS_THAN_EQUAL: "<=" > |
  <GREATER_THAN: ">" > |
  <GREATER_THAN_EQUAL: ">=" > |
  <NOT: "not" > |
  <CONTAINS: "contains" > |
  <PLUS: "+" > |
  <MINUS: "-" > |
  <DIVIDE: "/" > |
  <MULTIPLY: "*"> |
  <MODULO: "mod" > |
  <ARROW: "->" > |

  // Functions.
  <PLAY_ACTION: "play" > |
  <MOVE_ACTION: "move" > |
  <DEAL_ACTION: "deal" > |
  <PLAYER_CALL: "player" > |
  <PILE_CALL: "pile" > |

  //Statements.
  <IF: "if" > |
  <ELSE: "else" > |
  <FOREACH: "for" > |
  <IN: "in" > |
  <WHILE: "while" > |
  <STATE_DONE: "done" > |
  <STATE_NEXT: "next" > |
  <STATE_OUT: "out" > |
  <STATE_WIN: "win" > |
  <STATE_SKIP: "skip" > |
  <RETURN: "return" > |

  // Modifiers.
  <MANDATORY: "mandatory" > |

  <CURRENT_PLAYER: "CurrentPlayer" > |

  // ID has to be declared last (Matches longest first, then first declared).
  <ID: ["a"-"z", "A"-"Z", "_"](["a"-"z", "A"-"Z", "_", "0"-"9"])* >
}

/*
    ==============================================================================================
    Parser rules and AST generation definitions.
    ==============================================================================================
*/

// First non-terminal is prog.
SimpleNode prog()      :
{/*@bgen(jjtree) Prog */
  Prog jjtn000 = new Prog(JJTPROG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Prog */
  try {
/*@egen*/
  setup() (stage() | function())* <EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void setup()       :
{/*@bgen(jjtree) Setup */
  Setup jjtn000 = new Setup(JJTSETUP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Setup */
  try {
/*@egen*/
  <SETUP> setupBlock()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void stage()       :
{/*@bgen(jjtree) Stage */
  Stage jjtn000 = new Stage(JJTSTAGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Stage */
  try {
/*@egen*/
  <STAGE> id() <TO> id() block()  block()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void orExpr()        :
{/*@bgen(jjtree) OrExpr */
  OrExpr jjtn000 = new OrExpr(JJTOREXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OrExpr */
  try {
/*@egen*/
  andExpr() (<OR> andExpr())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void andExpr()         :
{/*@bgen(jjtree) AndExpr */
  AndExpr jjtn000 = new AndExpr(JJTANDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AndExpr */
  try {
/*@egen*/
  notExpr() (<AND> notExpr())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void notExpr()         :
{/*@bgen(jjtree) NotExpr */
  NotExpr jjtn000 = new NotExpr(JJTNOTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token not = null;}
{/*@bgen(jjtree) NotExpr */
  try {
/*@egen*/
  (not = <NOT>)? equalsExpr()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    if (not != null) {
      jjtn000.jjtSetValue(true);
    }
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void equalsExpr()            :
{/*@bgen(jjtree) EqualsExpr */
  EqualsExpr jjtn000 = new EqualsExpr(JJTEQUALSEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EqualsExpr */
  try {
/*@egen*/
  compareExpr() (<EQUALS> compareExpr())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void compareExpr()             :
{/*@bgen(jjtree) CompareExpr */
  CompareExpr jjtn000 = new CompareExpr(JJTCOMPAREEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CompareExpr */
  try {
/*@egen*/
  termExpr() (comparator() termExpr())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void termExpr()          :
{/*@bgen(jjtree) TermExpr */
  TermExpr jjtn000 = new TermExpr(JJTTERMEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TermExpr */
  try {
/*@egen*/
  factorExpr() (termOperator() factorExpr())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void factorExpr()            :
{/*@bgen(jjtree) FactorExpr */
  FactorExpr jjtn000 = new FactorExpr(JJTFACTOREXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FactorExpr */
  try {
/*@egen*/
  negativeExpr() (factorOperator() negativeExpr())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void negativeExpr()              :
{/*@bgen(jjtree) NegativeExpr */
  NegativeExpr jjtn000 = new NegativeExpr(JJTNEGATIVEEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token negative = null;}
{/*@bgen(jjtree) NegativeExpr */
  try {
/*@egen*/
  (negative = <MINUS>)? arrowExpr()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
      if (negative != null) {
        jjtn000.jjtSetValue(true);
      }
    }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void arrowExpr()           :
{/*@bgen(jjtree) ArrowExpr */
  ArrowExpr jjtn000 = new ArrowExpr(JJTARROWEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArrowExpr */
  try {
/*@egen*/
  valueExpr() (<ARROW> id())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void valueExpr()           :
{/*@bgen(jjtree) ValueExpr */
  ValueExpr jjtn000 = new ValueExpr(JJTVALUEEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ValueExpr */
 try {
/*@egen*/
 <LPAREN> orExpr() <RPAREN>
| LOOKAHEAD(2) call()
| id()
| currentPlayer()
| literal()/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void function()          :
{/*@bgen(jjtree) Function */
  Function jjtn000 = new Function(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Function */
  try {
/*@egen*/
  actionReturnType() id() <LPAREN> (param() (<COMMA> param())*)? <RPAREN> block()
| type()             id() <LPAREN> (param() (<COMMA> param())*)? <RPAREN> functionBlock()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void returnStatement()                 :
{/*@bgen(jjtree) ReturnStatement */
  ReturnStatement jjtn000 = new ReturnStatement(JJTRETURNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ReturnStatement */
  try {
/*@egen*/
  <RETURN> orExpr() <SEMICOLON>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void block()       :
{/*@bgen(jjtree) Block */
  Block jjtn000 = new Block(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Block */
  try {
/*@egen*/
  <LBRACE> (statement() | gameStateStatement() | optionStatement())* <RBRACE>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void setupBlock()            :
{/*@bgen(jjtree) SetupBlock */
  SetupBlock jjtn000 = new SetupBlock(JJTSETUPBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SetupBlock */
  try {
/*@egen*/
  <LBRACE> (playerCount() | pileDef() | statement() | playerDef())* <RBRACE>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void playerCount()             :
{/*@bgen(jjtree) PlayerCount */
  PlayerCount jjtn000 = new PlayerCount(JJTPLAYERCOUNT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PlayerCount */
  try {
/*@egen*/
  <PLAYER_COUNT> <ASSIGN> rangeLiteral() <SEMICOLON>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void pileDef()         :
{/*@bgen(jjtree) PileDef */
  PileDef jjtn000 = new PileDef(JJTPILEDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PileDef */
  try {
/*@egen*/
  <PILE_DEF> <ASSIGN> numberLiteral() <SEMICOLON>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void playerDef()           :
{/*@bgen(jjtree) PlayerDef */
  PlayerDef jjtn000 = new PlayerDef(JJTPLAYERDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PlayerDef */
  try {
/*@egen*/
  <PLAYER_DEF> <ASSIGN> <LBRACE> (declarationStatement())* <RBRACE>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void functionBlock()               :
{/*@bgen(jjtree) FunctionBlock */
  FunctionBlock jjtn000 = new FunctionBlock(JJTFUNCTIONBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionBlock */
  try {
/*@egen*/
  <LBRACE> (statement())* returnStatement() <RBRACE>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void actionReturnType()                  :
{/*@bgen(jjtree) ActionReturnType */
  ActionReturnType jjtn000 = new ActionReturnType(JJTACTIONRETURNTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ActionReturnType */
  try {
/*@egen*/
  <ACTION>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void pileCall()          :
{/*@bgen(jjtree) PileCall */
  PileCall jjtn000 = new PileCall(JJTPILECALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PileCall */
  try {
/*@egen*/
  <PILE_CALL> <LPAREN> orExpr() <RPAREN>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void playerCall()            :
{/*@bgen(jjtree) PlayerCall */
  PlayerCall jjtn000 = new PlayerCall(JJTPLAYERCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PlayerCall */
  try {
/*@egen*/
  <PLAYER_CALL> <LPAREN> orExpr() <RPAREN>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void moveCall()          :
{/*@bgen(jjtree) MoveCall */
  MoveCall jjtn000 = new MoveCall(JJTMOVECALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MoveCall */
  try {
/*@egen*/
  <MOVE_ACTION> <LPAREN> orExpr() <COMMA> orExpr() <COMMA> orExpr() <RPAREN>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void playCall()          :
{/*@bgen(jjtree) PlayCall */
  PlayCall jjtn000 = new PlayCall(JJTPLAYCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PlayCall */
  try {
/*@egen*/
  <PLAY_ACTION> <LPAREN> orExpr() <COMMA> orExpr() <RPAREN>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void dealCall()          :
{/*@bgen(jjtree) DealCall */
  DealCall jjtn000 = new DealCall(JJTDEALCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DealCall */
  try {
/*@egen*/
  <DEAL_ACTION> <LPAREN> orExpr() <COMMA> orExpr() <RPAREN>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void optionStatement()        :
{/*@bgen(jjtree) Option */
  Option jjtn000 = new Option(JJTOPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Option */
  try {
/*@egen*/
  (modifier())? <OPTION> <LPAREN> textLiteral() (<COMMA> optionParam())? <RPAREN> (<COLON> orExpr())? block()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void statement()           :
{/*@bgen(jjtree) Statement */
  Statement jjtn000 = new Statement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Statement */
  try {
/*@egen*/
  ifStatement()
| whileLoop()
| forEachLoop()
// Lookahead of 2 necessary because of common prefix between assignment and orExpr.
| LOOKAHEAD(4) assignmentStatement()
| declarationStatement()
| expressionStatement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void assignmentStatement()                     :
{/*@bgen(jjtree) AssignmentStatement */
  AssignmentStatement jjtn000 = new AssignmentStatement(JJTASSIGNMENTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AssignmentStatement */
  try {
/*@egen*/
  assignment() <SEMICOLON>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void declarationStatement()                      :
{/*@bgen(jjtree) DeclarationStatement */
  DeclarationStatement jjtn000 = new DeclarationStatement(JJTDECLARATIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DeclarationStatement */
  try {
/*@egen*/
  declaration() <SEMICOLON>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void expressionStatement()                     :
{/*@bgen(jjtree) ExpressionStatement */
  ExpressionStatement jjtn000 = new ExpressionStatement(JJTEXPRESSIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ExpressionStatement */
  try {
/*@egen*/
  orExpr() <SEMICOLON>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void gameStateStatement()                    :
{/*@bgen(jjtree) GameStateStatement */
  GameStateStatement jjtn000 = new GameStateStatement(JJTGAMESTATESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) GameStateStatement */
  try {
/*@egen*/
  done() <SEMICOLON>
| next() <SEMICOLON>
| out() <SEMICOLON>
| win() <SEMICOLON>
| skip() <SEMICOLON>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void done()           :
{/*@bgen(jjtree) DoneState */
  DoneState jjtn000 = new DoneState(JJTDONESTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DoneState */
  try {
/*@egen*/
  <STATE_DONE> <LPAREN> (orExpr())? <RPAREN>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void next()           :
{/*@bgen(jjtree) NextState */
  NextState jjtn000 = new NextState(JJTNEXTSTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NextState */
  try {
/*@egen*/
  <STATE_NEXT> <LPAREN> <RPAREN>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void out()          :
{/*@bgen(jjtree) OutState */
  OutState jjtn000 = new OutState(JJTOUTSTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OutState */
  try {
/*@egen*/
  <STATE_OUT> <LPAREN> (orExpr())? <RPAREN>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void win()          :
{/*@bgen(jjtree) WinState */
  WinState jjtn000 = new WinState(JJTWINSTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WinState */
  try {
/*@egen*/
  <STATE_WIN> <LPAREN> (orExpr())? <RPAREN>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void skip()           :
{/*@bgen(jjtree) SkipState */
  SkipState jjtn000 = new SkipState(JJTSKIPSTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SkipState */
  try {
/*@egen*/
  <STATE_SKIP> <LPAREN> (orExpr())? <RPAREN>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void declaration()             :
{/*@bgen(jjtree) Declaration */
  Declaration jjtn000 = new Declaration(JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Declaration */
  try {
/*@egen*/
  type() id() (<ASSIGN> orExpr())?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void assignment()            :
{/*@bgen(jjtree) Assignment */
  Assignment jjtn000 = new Assignment(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Assignment */
  try {
/*@egen*/
  LOOKAHEAD(2) id() <ARROW> id() <ASSIGN> orExpr()
|  id() <ASSIGN> orExpr()
| currentPlayer() <ARROW> id() <ASSIGN> orExpr()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
//| call() <ARROW> id() <ASSIGN> orExpr()
}

void ifStatement()             :
{/*@bgen(jjtree) IfStatement */
  IfStatement jjtn000 = new IfStatement(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IfStatement */
  try {
/*@egen*/
  <IF> <LPAREN> orExpr() <RPAREN> block() (LOOKAHEAD(2) elseIfStatement())* (elseStatement())?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void elseIfStatement()                 :
{/*@bgen(jjtree) ElseIfStatement */
  ElseIfStatement jjtn000 = new ElseIfStatement(JJTELSEIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ElseIfStatement */
  try {
/*@egen*/
  <ELSE> <IF> <LPAREN> orExpr() <RPAREN> block()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void elseStatement()               :
{/*@bgen(jjtree) ElseStatement */
  ElseStatement jjtn000 = new ElseStatement(JJTELSESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ElseStatement */
  try {
/*@egen*/
  <ELSE> block()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void whileLoop()           :
{/*@bgen(jjtree) WhileLoop */
  WhileLoop jjtn000 = new WhileLoop(JJTWHILELOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WhileLoop */
  try {
/*@egen*/
  <WHILE> <LPAREN> orExpr() <RPAREN> block()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void forEachLoop()             :
{/*@bgen(jjtree) ForEachLoop */
  ForEachLoop jjtn000 = new ForEachLoop(JJTFOREACHLOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ForEachLoop */
  try {
/*@egen*/
  <FOREACH> <LPAREN> type() id() <IN> orExpr() <RPAREN> block()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void modifier()          :
{/*@bgen(jjtree) Modifier */
  Modifier jjtn000 = new Modifier(JJTMODIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Modifier */
  try {
/*@egen*/
  mandatoryModifier() (repeatModifier())?
| repeatModifier()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void mandatoryModifier()                   :
{/*@bgen(jjtree) MandatoryModifier */
  MandatoryModifier jjtn000 = new MandatoryModifier(JJTMANDATORYMODIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MandatoryModifier */
  try {
/*@egen*/
  <MANDATORY>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void repeatModifier()                :
{/*@bgen(jjtree) RepeatModifier */
  RepeatModifier jjtn000 = new RepeatModifier(JJTREPEATMODIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) RepeatModifier */
  try {
/*@egen*/
  <LESS_THAN> (t = <NUMBER>) <GREATER_THAN>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(Integer.parseInt(t.image));
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void comparator()            :
{/*@bgen(jjtree) Comparator */
  Comparator jjtn000 = new Comparator(JJTCOMPARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token comparator = null; }
{/*@bgen(jjtree) Comparator */
  try {
/*@egen*/
  (comparator = <GREATER_THAN> | comparator = <GREATER_THAN_EQUAL> | comparator = <LESS_THAN> |comparator = <LESS_THAN_EQUAL> | comparator = <CONTAINS>)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(javacc.Operator.fromSymbol(comparator.image));
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void termOperator()              :
{/*@bgen(jjtree) TermOperator */
  TermOperator jjtn000 = new TermOperator(JJTTERMOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token operator = null; }
{/*@bgen(jjtree) TermOperator */
  try {
/*@egen*/
  (operator = <PLUS> | operator = <MINUS>)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(javacc.Operator.fromSymbol(operator.image));
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void factorOperator()                :
{/*@bgen(jjtree) FactorOperator */
  FactorOperator jjtn000 = new FactorOperator(JJTFACTOROPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token operator = null; }
{/*@bgen(jjtree) FactorOperator */
  try {
/*@egen*/
  (operator = <MULTIPLY> | operator = <DIVIDE> | operator = <MODULO>)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(javacc.Operator.fromSymbol(operator.image));
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void currentPlayer()               :
{/*@bgen(jjtree) CurrentPlayer */
  CurrentPlayer jjtn000 = new CurrentPlayer(JJTCURRENTPLAYER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CurrentPlayer */
  try {
/*@egen*/
  <CURRENT_PLAYER>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void id()            :
{/*@bgen(jjtree) Identifier */
  Identifier jjtn000 = new Identifier(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token i; }
{/*@bgen(jjtree) Identifier */
  try {
/*@egen*/
  i = <ID>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/

  {
    jjtn000.jjtSetValue(i.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void optionParam()                 :
{/*@bgen(jjtree) OptionParameter */
  OptionParameter jjtn000 = new OptionParameter(JJTOPTIONPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OptionParameter */
  try {
/*@egen*/
  (playerType() | cardType() | suitType() | rankType() | pileType()) id()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void param()           :
{/*@bgen(jjtree) Parameter */
  Parameter jjtn000 = new Parameter(JJTPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Parameter */
  try {
/*@egen*/
  type() id()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void type()      :
{/*@bgen(jjtree) Type */
  Type jjtn000 = new Type(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Type */
  try {
/*@egen*/
  playerType()
| numberType()
| cardType()
| rankType()
| suitType()
| sequenceType()
| pileType()
| booleanType()
| textType()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void playerType()            :
{/*@bgen(jjtree) PlayerType */
  PlayerType jjtn000 = new PlayerType(JJTPLAYERTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PlayerType */
  try {
/*@egen*/
  <PLAYER_TYPE>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void numberType()            :
{/*@bgen(jjtree) NumberType */
  NumberType jjtn000 = new NumberType(JJTNUMBERTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NumberType */
  try {
/*@egen*/
  <NUMBER_TYPE>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void cardType()          :
{/*@bgen(jjtree) CardType */
  CardType jjtn000 = new CardType(JJTCARDTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CardType */
  try {
/*@egen*/
  <CARD_TYPE>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void rankType()          :
{/*@bgen(jjtree) RankType */
  RankType jjtn000 = new RankType(JJTRANKTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RankType */
  try {
/*@egen*/
  <RANK_TYPE>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void suitType()          :
{/*@bgen(jjtree) SuitType */
  SuitType jjtn000 = new SuitType(JJTSUITTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SuitType */
  try {
/*@egen*/
  <SUIT_TYPE>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void sequenceType()              :
{/*@bgen(jjtree) SequenceType */
  SequenceType jjtn000 = new SequenceType(JJTSEQUENCETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SequenceType */
  try {
/*@egen*/
  <SEQUENCE_TYPE> <LESS_THAN> type() <GREATER_THAN>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void pileType()          :
{/*@bgen(jjtree) PileType */
  PileType jjtn000 = new PileType(JJTPILETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PileType */
  try {
/*@egen*/
  <PILE_TYPE>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void booleanType()             :
{/*@bgen(jjtree) BooleanType */
  BooleanType jjtn000 = new BooleanType(JJTBOOLEANTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BooleanType */
  try {
/*@egen*/
  <BOOLEAN_TYPE>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void textType()          :
{/*@bgen(jjtree) TextType */
  TextType jjtn000 = new TextType(JJTTEXTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TextType */
  try {
/*@egen*/
  <TEXT_TYPE>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void call()      :
{/*@bgen(jjtree) Call */
  Call jjtn000 = new Call(JJTCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Call */
  try {
/*@egen*/
  id() <LPAREN> (orExpr() (<COMMA> orExpr())*)? <RPAREN>
| playCall()
| dealCall()
| moveCall()
| playerCall()
| pileCall()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void literal()         :
{/*@bgen(jjtree) Literal */
  Literal jjtn000 = new Literal(JJTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Literal */
  try {
/*@egen*/
  // Lookahead of 2 necessary because both cardLiteral and rankLiteral starts with a rank literal.
  LOOKAHEAD(2) cardLiteral()
| textLiteral()
| numberLiteral()
| suitLiteral()
| rankLiteral()
| booleanLiteral()
| sequenceLiteral()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void textLiteral()             :
{/*@bgen(jjtree) TextLiteral */
  TextLiteral jjtn000 = new TextLiteral(JJTTEXTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token text; }
{/*@bgen(jjtree) TextLiteral */
  try {
/*@egen*/
  text = <TEXT>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(text.image.subSequence(1, text.image.length() -1));
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void rankLiteral()             :
{/*@bgen(jjtree) RankLiteral */
  RankLiteral jjtn000 = new RankLiteral(JJTRANKLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token rank = null; }
{/*@bgen(jjtree) RankLiteral */
try {
/*@egen*/
(rank = <ACE>
| rank = <TWO>
| rank = <THREE>
| rank = <FOUR>
| rank = <FIVE>
| rank = <SIX>
| rank = <SEVEN>
| rank = <EIGHT>
| rank = <NINE>
| rank = <TEN>
| rank = <JACK>
| rank = <QUEEN>
| rank = <KING>)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(rank.image);
  }/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void cardLiteral()             :
{/*@bgen(jjtree) CardLiteral */
  CardLiteral jjtn000 = new CardLiteral(JJTCARDLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CardLiteral */
  try {
/*@egen*/
  rankLiteral() <OF> suitLiteral()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void booleanLiteral()                :
{/*@bgen(jjtree) BooleanLiteral */
 BooleanLiteral jjtn000 = new BooleanLiteral(JJTBOOLEANLITERAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) BooleanLiteral */
  try {
/*@egen*/
  t = <FALSE>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ {jjtn000.jjtSetValue(false);}
| t = <TRUE>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {jjtn000.jjtSetValue(true);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void suitLiteral()             :
{/*@bgen(jjtree) SuitLiteral */
  SuitLiteral jjtn000 = new SuitLiteral(JJTSUITLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t = null; }
{/*@bgen(jjtree) SuitLiteral */
  try {
/*@egen*/
  (t = <SPADES> | t = <CLUBS> | t = <HEARTS> | t = <DIAMONDS>)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void sequenceLiteral()                 :
{/*@bgen(jjtree) SequenceLiteral */
  SequenceLiteral jjtn000 = new SequenceLiteral(JJTSEQUENCELITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SequenceLiteral */
  try {
/*@egen*/
  <LBRACE> (orExpr() (<COMMA> orExpr())*)? <RBRACE>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void rangeLiteral()              :
{/*@bgen(jjtree) RangeLiteral */
  RangeLiteral jjtn000 = new RangeLiteral(JJTRANGELITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RangeLiteral */
  try {
/*@egen*/
  numberLiteral() <RANGE> numberLiteral()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void numberLiteral()               :
{/*@bgen(jjtree) NumberLiteral */
 NumberLiteral jjtn000 = new NumberLiteral(JJTNUMBERLITERAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) NumberLiteral */
  try {
/*@egen*/
  t = <NUMBER>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(Integer.parseInt(t.image));
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}