/* FlipParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. FlipParser.java */
package javacc.generated;
import java.io.File;
import java.io.Reader;
import java.io.IOException;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.io.BufferedReader;

import javacc.util.TreePrinter;import javacc.visitors.FixExpressionsVisitor;import javacc.visitors.PrintingVisitor;import javacc.visitors.TypeCheckerVisitor;import javacc.visitors.codegeneration.CodeGenerationVisitor;import org.apache.log4j.Logger;

public class FlipParser/*@bgen(jjtree)*/implements FlipParserTreeConstants, FlipParserConstants {/*@bgen(jjtree)*/
  protected JJTFlipParserState jjtree = new JJTFlipParserState();private static final Logger logger = Logger.getLogger(FlipParser.class);

  public static void main(String[] args) {
    long startTime = System.nanoTime();
    try {
      String filename = System.getProperty("user.dir") + File.separator + "src" + File.separator + "javacc" + File.separator + "asshole";
      Reader reader = new InputStreamReader(new FileInputStream(filename), StandardCharsets.US_ASCII);
      FlipParser p = new FlipParser(reader);

      try {
        SimpleNode node = p.prog();
        node.jjtAccept(new FixExpressionsVisitor(), null);
        node.jjtAccept(new TypeCheckerVisitor(), null);
        node.jjtAccept(new CodeGenerationVisitor(), null);

        float endTimeSeconds = ((float)(System.nanoTime() - startTime)) / 1000000000F;
        System.out.format("Compiling this FLIP program took %.1f seconds.\n", endTimeSeconds);
//        TreePrinter.printTree(node, "");
        execTarget();
      } catch (ParseException e) {
        e.printStackTrace();
        logger.error("Failed to parse because:", e);
      }
    } catch (IOException e) {
      e.printStackTrace();
      logger.error("An IOException occurred while trying to parse the file", e);
    }
  }

  // Executes executable file.
  private static void execTarget() {
    try {
      final String osName = System.getProperty("os.name");
      if (osName.startsWith("Win"))
        Runtime.getRuntime().exec("cmd /c start Run.exe");

      if (osName.startsWith("Mac")) {
        Process proc = Runtime.getRuntime().exec("python3 -m http.server");
        BufferedReader ioStream = new BufferedReader(new InputStreamReader(proc.getInputStream()));

        Runtime.getRuntime().exec("open http://localhost:8000/main.html");

        int line;
        while((line = ioStream .read()) != -1) {
          System.out.print((char) line);
        }

        proc.waitFor();
      }
    } catch (InterruptedException | IOException e) {
      System.out.println("Could not execute executable.");
    }
  }

/*
    ==============================================================================================
    Parser rules and AST generation definitions.
    ==============================================================================================
*/

// First non-terminal is prog.
  final public SimpleNode prog() throws ParseException {/*@bgen(jjtree) Prog */
  Prog jjtn000 = new Prog(JJTPROG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      setup();
      label_1:
      while (true) {
        switch (jj_nt.kind) {
        case STAGE:
        case ACTION:
        case PLAYER_TYPE:
        case NUMBER_TYPE:
        case CARD_TYPE:
        case SUIT_TYPE:
        case RANK_TYPE:
        case SEQUENCE_TYPE:
        case PILE_TYPE:
        case BOOLEAN_TYPE:
        case TEXT_TYPE:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        switch (jj_nt.kind) {
        case STAGE:{
          stage();
          break;
          }
        case ACTION:
        case PLAYER_TYPE:
        case NUMBER_TYPE:
        case CARD_TYPE:
        case SUIT_TYPE:
        case RANK_TYPE:
        case SEQUENCE_TYPE:
        case PILE_TYPE:
        case BOOLEAN_TYPE:
        case TEXT_TYPE:{
          function();
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void setup() throws ParseException {/*@bgen(jjtree) Setup */
  Setup jjtn000 = new Setup(JJTSETUP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SETUP);
      setupBlock();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void stage() throws ParseException {/*@bgen(jjtree) Stage */
  Stage jjtn000 = new Stage(JJTSTAGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(STAGE);
      id();
      jj_consume_token(TO);
      id();
      block();
      block();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void orExpr() throws ParseException {/*@bgen(jjtree) OrExpr */
  OrExpr jjtn000 = new OrExpr(JJTOREXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      andExpr();
      label_2:
      while (true) {
        switch (jj_nt.kind) {
        case OR:{
          ;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        jj_consume_token(OR);
        andExpr();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void andExpr() throws ParseException {/*@bgen(jjtree) AndExpr */
  AndExpr jjtn000 = new AndExpr(JJTANDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      notExpr();
      label_3:
      while (true) {
        switch (jj_nt.kind) {
        case AND:{
          ;
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        jj_consume_token(AND);
        notExpr();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void notExpr() throws ParseException {/*@bgen(jjtree) NotExpr */
  NotExpr jjtn000 = new NotExpr(JJTNOTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token not = null;
    try {
      switch (jj_nt.kind) {
      case NOT:{
        not = jj_consume_token(NOT);
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      equalsExpr();
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
if (not != null) {
      jjtn000.jjtSetValue(true);
    }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void equalsExpr() throws ParseException {/*@bgen(jjtree) EqualsExpr */
  EqualsExpr jjtn000 = new EqualsExpr(JJTEQUALSEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      compareExpr();
      label_4:
      while (true) {
        switch (jj_nt.kind) {
        case EQUALS:{
          ;
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          break label_4;
        }
        jj_consume_token(EQUALS);
        compareExpr();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void compareExpr() throws ParseException {/*@bgen(jjtree) CompareExpr */
  CompareExpr jjtn000 = new CompareExpr(JJTCOMPAREEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      termExpr();
      label_5:
      while (true) {
        switch (jj_nt.kind) {
        case LESS_THAN:
        case LESS_THAN_EQUAL:
        case GREATER_THAN:
        case GREATER_THAN_EQUAL:
        case CONTAINS:{
          ;
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          break label_5;
        }
        comparator();
        termExpr();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void termExpr() throws ParseException {/*@bgen(jjtree) TermExpr */
  TermExpr jjtn000 = new TermExpr(JJTTERMEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      factorExpr();
      label_6:
      while (true) {
        switch (jj_nt.kind) {
        case PLUS:
        case MINUS:{
          ;
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          break label_6;
        }
        termOperator();
        factorExpr();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void factorExpr() throws ParseException {/*@bgen(jjtree) FactorExpr */
  FactorExpr jjtn000 = new FactorExpr(JJTFACTOREXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      negativeExpr();
      label_7:
      while (true) {
        switch (jj_nt.kind) {
        case DIVIDE:
        case MULTIPLY:
        case MODULO:{
          ;
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          break label_7;
        }
        factorOperator();
        negativeExpr();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void negativeExpr() throws ParseException {/*@bgen(jjtree) NegativeExpr */
  NegativeExpr jjtn000 = new NegativeExpr(JJTNEGATIVEEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token negative = null;
    try {
      switch (jj_nt.kind) {
      case MINUS:{
        negative = jj_consume_token(MINUS);
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      arrowExpr();
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
if (negative != null) {
        jjtn000.jjtSetValue(true);
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void arrowExpr() throws ParseException {/*@bgen(jjtree) ArrowExpr */
  ArrowExpr jjtn000 = new ArrowExpr(JJTARROWEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      valueExpr();
      label_8:
      while (true) {
        switch (jj_nt.kind) {
        case ARROW:{
          ;
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          break label_8;
        }
        jj_consume_token(ARROW);
        id();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void valueExpr() throws ParseException {/*@bgen(jjtree) ValueExpr */
  ValueExpr jjtn000 = new ValueExpr(JJTVALUEEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case LPAREN:{
        jj_consume_token(LPAREN);
        orExpr();
        jj_consume_token(RPAREN);
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        if (jj_2_1(2)) {
          call();
        } else {
          switch (jj_nt.kind) {
          case ID:{
            id();
            break;
            }
          case CURRENT_PLAYER:{
            currentPlayer();
            break;
            }
          case LBRACE:
          case NUMBER:
          case TEXT:
          case TRUE:
          case FALSE:
          case SPADES:
          case CLUBS:
          case HEARTS:
          case DIAMONDS:
          case ACE:
          case TWO:
          case THREE:
          case FOUR:
          case FIVE:
          case SIX:
          case SEVEN:
          case EIGHT:
          case NINE:
          case TEN:
          case JACK:
          case QUEEN:
          case KING:{
            literal();
            break;
            }
          default:
            jj_la1[12] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void function() throws ParseException {/*@bgen(jjtree) Function */
  Function jjtn000 = new Function(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case ACTION:{
        actionReturnType();
        id();
        jj_consume_token(LPAREN);
        switch (jj_nt.kind) {
        case PLAYER_TYPE:
        case NUMBER_TYPE:
        case CARD_TYPE:
        case SUIT_TYPE:
        case RANK_TYPE:
        case SEQUENCE_TYPE:
        case PILE_TYPE:
        case BOOLEAN_TYPE:
        case TEXT_TYPE:{
          param();
          label_9:
          while (true) {
            switch (jj_nt.kind) {
            case COMMA:{
              ;
              break;
              }
            default:
              jj_la1[13] = jj_gen;
              break label_9;
            }
            jj_consume_token(COMMA);
            param();
          }
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
        block();
        break;
        }
      case PLAYER_TYPE:
      case NUMBER_TYPE:
      case CARD_TYPE:
      case SUIT_TYPE:
      case RANK_TYPE:
      case SEQUENCE_TYPE:
      case PILE_TYPE:
      case BOOLEAN_TYPE:
      case TEXT_TYPE:{
        type();
        id();
        jj_consume_token(LPAREN);
        switch (jj_nt.kind) {
        case PLAYER_TYPE:
        case NUMBER_TYPE:
        case CARD_TYPE:
        case SUIT_TYPE:
        case RANK_TYPE:
        case SEQUENCE_TYPE:
        case PILE_TYPE:
        case BOOLEAN_TYPE:
        case TEXT_TYPE:{
          param();
          label_10:
          while (true) {
            switch (jj_nt.kind) {
            case COMMA:{
              ;
              break;
              }
            default:
              jj_la1[15] = jj_gen;
              break label_10;
            }
            jj_consume_token(COMMA);
            param();
          }
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
        functionBlock();
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void returnStatement() throws ParseException {/*@bgen(jjtree) ReturnStatement */
  ReturnStatement jjtn000 = new ReturnStatement(JJTRETURNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RETURN);
      orExpr();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void block() throws ParseException {/*@bgen(jjtree) Block */
  Block jjtn000 = new Block(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACE);
      label_11:
      while (true) {
        switch (jj_nt.kind) {
        case OPTION:
        case LPAREN:
        case LBRACE:
        case NUMBER:
        case TEXT:
        case PLAYER_TYPE:
        case NUMBER_TYPE:
        case CARD_TYPE:
        case SUIT_TYPE:
        case RANK_TYPE:
        case SEQUENCE_TYPE:
        case PILE_TYPE:
        case BOOLEAN_TYPE:
        case TEXT_TYPE:
        case TRUE:
        case FALSE:
        case SPADES:
        case CLUBS:
        case HEARTS:
        case DIAMONDS:
        case ACE:
        case TWO:
        case THREE:
        case FOUR:
        case FIVE:
        case SIX:
        case SEVEN:
        case EIGHT:
        case NINE:
        case TEN:
        case JACK:
        case QUEEN:
        case KING:
        case LESS_THAN:
        case NOT:
        case MINUS:
        case PLAY_ACTION:
        case MOVE_ACTION:
        case DEAL_ACTION:
        case PLAYER_CALL:
        case PILE_CALL:
        case IF:
        case FOREACH:
        case WHILE:
        case STATE_DONE:
        case STATE_NEXT:
        case STATE_OUT:
        case STATE_WIN:
        case STATE_SKIP:
        case MANDATORY:
        case CURRENT_PLAYER:
        case ID:{
          ;
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          break label_11;
        }
        switch (jj_nt.kind) {
        case LPAREN:
        case LBRACE:
        case NUMBER:
        case TEXT:
        case PLAYER_TYPE:
        case NUMBER_TYPE:
        case CARD_TYPE:
        case SUIT_TYPE:
        case RANK_TYPE:
        case SEQUENCE_TYPE:
        case PILE_TYPE:
        case BOOLEAN_TYPE:
        case TEXT_TYPE:
        case TRUE:
        case FALSE:
        case SPADES:
        case CLUBS:
        case HEARTS:
        case DIAMONDS:
        case ACE:
        case TWO:
        case THREE:
        case FOUR:
        case FIVE:
        case SIX:
        case SEVEN:
        case EIGHT:
        case NINE:
        case TEN:
        case JACK:
        case QUEEN:
        case KING:
        case NOT:
        case MINUS:
        case PLAY_ACTION:
        case MOVE_ACTION:
        case DEAL_ACTION:
        case PLAYER_CALL:
        case PILE_CALL:
        case IF:
        case FOREACH:
        case WHILE:
        case CURRENT_PLAYER:
        case ID:{
          statement();
          break;
          }
        case STATE_DONE:
        case STATE_NEXT:
        case STATE_OUT:
        case STATE_WIN:
        case STATE_SKIP:{
          gameStateStatement();
          break;
          }
        case OPTION:
        case LESS_THAN:
        case MANDATORY:{
          optionStatement();
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void setupBlock() throws ParseException {/*@bgen(jjtree) SetupBlock */
  SetupBlock jjtn000 = new SetupBlock(JJTSETUPBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACE);
      label_12:
      while (true) {
        switch (jj_nt.kind) {
        case LPAREN:
        case LBRACE:
        case NUMBER:
        case TEXT:
        case PLAYER_TYPE:
        case NUMBER_TYPE:
        case CARD_TYPE:
        case SUIT_TYPE:
        case RANK_TYPE:
        case SEQUENCE_TYPE:
        case PILE_TYPE:
        case BOOLEAN_TYPE:
        case TEXT_TYPE:
        case TRUE:
        case FALSE:
        case PLAYER_COUNT:
        case PLAYER_DEF:
        case PILE_DEF:
        case SPADES:
        case CLUBS:
        case HEARTS:
        case DIAMONDS:
        case ACE:
        case TWO:
        case THREE:
        case FOUR:
        case FIVE:
        case SIX:
        case SEVEN:
        case EIGHT:
        case NINE:
        case TEN:
        case JACK:
        case QUEEN:
        case KING:
        case NOT:
        case MINUS:
        case PLAY_ACTION:
        case MOVE_ACTION:
        case DEAL_ACTION:
        case PLAYER_CALL:
        case PILE_CALL:
        case IF:
        case FOREACH:
        case WHILE:
        case CURRENT_PLAYER:
        case ID:{
          ;
          break;
          }
        default:
          jj_la1[20] = jj_gen;
          break label_12;
        }
        switch (jj_nt.kind) {
        case PLAYER_COUNT:{
          playerCount();
          break;
          }
        case PILE_DEF:{
          pileDef();
          break;
          }
        case LPAREN:
        case LBRACE:
        case NUMBER:
        case TEXT:
        case PLAYER_TYPE:
        case NUMBER_TYPE:
        case CARD_TYPE:
        case SUIT_TYPE:
        case RANK_TYPE:
        case SEQUENCE_TYPE:
        case PILE_TYPE:
        case BOOLEAN_TYPE:
        case TEXT_TYPE:
        case TRUE:
        case FALSE:
        case SPADES:
        case CLUBS:
        case HEARTS:
        case DIAMONDS:
        case ACE:
        case TWO:
        case THREE:
        case FOUR:
        case FIVE:
        case SIX:
        case SEVEN:
        case EIGHT:
        case NINE:
        case TEN:
        case JACK:
        case QUEEN:
        case KING:
        case NOT:
        case MINUS:
        case PLAY_ACTION:
        case MOVE_ACTION:
        case DEAL_ACTION:
        case PLAYER_CALL:
        case PILE_CALL:
        case IF:
        case FOREACH:
        case WHILE:
        case CURRENT_PLAYER:
        case ID:{
          statement();
          break;
          }
        case PLAYER_DEF:{
          playerDef();
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void playerCount() throws ParseException {/*@bgen(jjtree) PlayerCount */
  PlayerCount jjtn000 = new PlayerCount(JJTPLAYERCOUNT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PLAYER_COUNT);
      jj_consume_token(ASSIGN);
      rangeLiteral();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void pileDef() throws ParseException {/*@bgen(jjtree) PileDef */
  PileDef jjtn000 = new PileDef(JJTPILEDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PILE_DEF);
      jj_consume_token(ASSIGN);
      numberLiteral();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void playerDef() throws ParseException {/*@bgen(jjtree) PlayerDef */
  PlayerDef jjtn000 = new PlayerDef(JJTPLAYERDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PLAYER_DEF);
      jj_consume_token(ASSIGN);
      jj_consume_token(LBRACE);
      label_13:
      while (true) {
        switch (jj_nt.kind) {
        case PLAYER_TYPE:
        case NUMBER_TYPE:
        case CARD_TYPE:
        case SUIT_TYPE:
        case RANK_TYPE:
        case SEQUENCE_TYPE:
        case PILE_TYPE:
        case BOOLEAN_TYPE:
        case TEXT_TYPE:{
          ;
          break;
          }
        default:
          jj_la1[22] = jj_gen;
          break label_13;
        }
        declarationStatement();
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void functionBlock() throws ParseException {/*@bgen(jjtree) FunctionBlock */
  FunctionBlock jjtn000 = new FunctionBlock(JJTFUNCTIONBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACE);
      label_14:
      while (true) {
        switch (jj_nt.kind) {
        case LPAREN:
        case LBRACE:
        case NUMBER:
        case TEXT:
        case PLAYER_TYPE:
        case NUMBER_TYPE:
        case CARD_TYPE:
        case SUIT_TYPE:
        case RANK_TYPE:
        case SEQUENCE_TYPE:
        case PILE_TYPE:
        case BOOLEAN_TYPE:
        case TEXT_TYPE:
        case TRUE:
        case FALSE:
        case SPADES:
        case CLUBS:
        case HEARTS:
        case DIAMONDS:
        case ACE:
        case TWO:
        case THREE:
        case FOUR:
        case FIVE:
        case SIX:
        case SEVEN:
        case EIGHT:
        case NINE:
        case TEN:
        case JACK:
        case QUEEN:
        case KING:
        case NOT:
        case MINUS:
        case PLAY_ACTION:
        case MOVE_ACTION:
        case DEAL_ACTION:
        case PLAYER_CALL:
        case PILE_CALL:
        case IF:
        case FOREACH:
        case WHILE:
        case CURRENT_PLAYER:
        case ID:{
          ;
          break;
          }
        default:
          jj_la1[23] = jj_gen;
          break label_14;
        }
        statement();
      }
      returnStatement();
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void actionReturnType() throws ParseException {/*@bgen(jjtree) ActionReturnType */
  ActionReturnType jjtn000 = new ActionReturnType(JJTACTIONRETURNTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ACTION);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void pileCall() throws ParseException {/*@bgen(jjtree) PileCall */
  PileCall jjtn000 = new PileCall(JJTPILECALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PILE_CALL);
      jj_consume_token(LPAREN);
      orExpr();
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void playerCall() throws ParseException {/*@bgen(jjtree) PlayerCall */
  PlayerCall jjtn000 = new PlayerCall(JJTPLAYERCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PLAYER_CALL);
      jj_consume_token(LPAREN);
      orExpr();
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void moveCall() throws ParseException {/*@bgen(jjtree) MoveCall */
  MoveCall jjtn000 = new MoveCall(JJTMOVECALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MOVE_ACTION);
      jj_consume_token(LPAREN);
      orExpr();
      jj_consume_token(COMMA);
      orExpr();
      jj_consume_token(COMMA);
      orExpr();
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void playCall() throws ParseException {/*@bgen(jjtree) PlayCall */
  PlayCall jjtn000 = new PlayCall(JJTPLAYCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PLAY_ACTION);
      jj_consume_token(LPAREN);
      orExpr();
      jj_consume_token(COMMA);
      orExpr();
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void dealCall() throws ParseException {/*@bgen(jjtree) DealCall */
  DealCall jjtn000 = new DealCall(JJTDEALCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DEAL_ACTION);
      jj_consume_token(LPAREN);
      orExpr();
      jj_consume_token(COMMA);
      orExpr();
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void optionStatement() throws ParseException {/*@bgen(jjtree) Option */
  Option jjtn000 = new Option(JJTOPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case LESS_THAN:
      case MANDATORY:{
        modifier();
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      jj_consume_token(OPTION);
      jj_consume_token(LPAREN);
      textLiteral();
      switch (jj_nt.kind) {
      case COMMA:{
        jj_consume_token(COMMA);
        optionParam();
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      switch (jj_nt.kind) {
      case COLON:{
        jj_consume_token(COLON);
        orExpr();
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        ;
      }
      block();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void statement() throws ParseException {/*@bgen(jjtree) Statement */
  Statement jjtn000 = new Statement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case IF:{
        ifStatement();
        break;
        }
      case WHILE:{
        whileLoop();
        break;
        }
      case FOREACH:{
        forEachLoop();
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        if (jj_2_2(4)) {
          assignmentStatement();
        } else {
          switch (jj_nt.kind) {
          case PLAYER_TYPE:
          case NUMBER_TYPE:
          case CARD_TYPE:
          case SUIT_TYPE:
          case RANK_TYPE:
          case SEQUENCE_TYPE:
          case PILE_TYPE:
          case BOOLEAN_TYPE:
          case TEXT_TYPE:{
            declarationStatement();
            break;
            }
          case LPAREN:
          case LBRACE:
          case NUMBER:
          case TEXT:
          case TRUE:
          case FALSE:
          case SPADES:
          case CLUBS:
          case HEARTS:
          case DIAMONDS:
          case ACE:
          case TWO:
          case THREE:
          case FOUR:
          case FIVE:
          case SIX:
          case SEVEN:
          case EIGHT:
          case NINE:
          case TEN:
          case JACK:
          case QUEEN:
          case KING:
          case NOT:
          case MINUS:
          case PLAY_ACTION:
          case MOVE_ACTION:
          case DEAL_ACTION:
          case PLAYER_CALL:
          case PILE_CALL:
          case CURRENT_PLAYER:
          case ID:{
            expressionStatement();
            break;
            }
          default:
            jj_la1[28] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void assignmentStatement() throws ParseException {/*@bgen(jjtree) AssignmentStatement */
  AssignmentStatement jjtn000 = new AssignmentStatement(JJTASSIGNMENTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      assignment();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void declarationStatement() throws ParseException {/*@bgen(jjtree) DeclarationStatement */
  DeclarationStatement jjtn000 = new DeclarationStatement(JJTDECLARATIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      declaration();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void expressionStatement() throws ParseException {/*@bgen(jjtree) ExpressionStatement */
  ExpressionStatement jjtn000 = new ExpressionStatement(JJTEXPRESSIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      orExpr();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void gameStateStatement() throws ParseException {/*@bgen(jjtree) GameStateStatement */
  GameStateStatement jjtn000 = new GameStateStatement(JJTGAMESTATESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case STATE_DONE:{
        done();
        jj_consume_token(SEMICOLON);
        break;
        }
      case STATE_NEXT:{
        next();
        jj_consume_token(SEMICOLON);
        break;
        }
      case STATE_OUT:{
        out();
        jj_consume_token(SEMICOLON);
        break;
        }
      case STATE_WIN:{
        win();
        jj_consume_token(SEMICOLON);
        break;
        }
      case STATE_SKIP:{
        skip();
        jj_consume_token(SEMICOLON);
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void done() throws ParseException {/*@bgen(jjtree) DoneState */
  DoneState jjtn000 = new DoneState(JJTDONESTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(STATE_DONE);
      jj_consume_token(LPAREN);
      switch (jj_nt.kind) {
      case LPAREN:
      case LBRACE:
      case NUMBER:
      case TEXT:
      case TRUE:
      case FALSE:
      case SPADES:
      case CLUBS:
      case HEARTS:
      case DIAMONDS:
      case ACE:
      case TWO:
      case THREE:
      case FOUR:
      case FIVE:
      case SIX:
      case SEVEN:
      case EIGHT:
      case NINE:
      case TEN:
      case JACK:
      case QUEEN:
      case KING:
      case NOT:
      case MINUS:
      case PLAY_ACTION:
      case MOVE_ACTION:
      case DEAL_ACTION:
      case PLAYER_CALL:
      case PILE_CALL:
      case CURRENT_PLAYER:
      case ID:{
        orExpr();
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void next() throws ParseException {/*@bgen(jjtree) NextState */
  NextState jjtn000 = new NextState(JJTNEXTSTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(STATE_NEXT);
      jj_consume_token(LPAREN);
      jj_consume_token(RPAREN);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void out() throws ParseException {/*@bgen(jjtree) OutState */
  OutState jjtn000 = new OutState(JJTOUTSTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(STATE_OUT);
      jj_consume_token(LPAREN);
      switch (jj_nt.kind) {
      case LPAREN:
      case LBRACE:
      case NUMBER:
      case TEXT:
      case TRUE:
      case FALSE:
      case SPADES:
      case CLUBS:
      case HEARTS:
      case DIAMONDS:
      case ACE:
      case TWO:
      case THREE:
      case FOUR:
      case FIVE:
      case SIX:
      case SEVEN:
      case EIGHT:
      case NINE:
      case TEN:
      case JACK:
      case QUEEN:
      case KING:
      case NOT:
      case MINUS:
      case PLAY_ACTION:
      case MOVE_ACTION:
      case DEAL_ACTION:
      case PLAYER_CALL:
      case PILE_CALL:
      case CURRENT_PLAYER:
      case ID:{
        orExpr();
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void win() throws ParseException {/*@bgen(jjtree) WinState */
  WinState jjtn000 = new WinState(JJTWINSTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(STATE_WIN);
      jj_consume_token(LPAREN);
      switch (jj_nt.kind) {
      case LPAREN:
      case LBRACE:
      case NUMBER:
      case TEXT:
      case TRUE:
      case FALSE:
      case SPADES:
      case CLUBS:
      case HEARTS:
      case DIAMONDS:
      case ACE:
      case TWO:
      case THREE:
      case FOUR:
      case FIVE:
      case SIX:
      case SEVEN:
      case EIGHT:
      case NINE:
      case TEN:
      case JACK:
      case QUEEN:
      case KING:
      case NOT:
      case MINUS:
      case PLAY_ACTION:
      case MOVE_ACTION:
      case DEAL_ACTION:
      case PLAYER_CALL:
      case PILE_CALL:
      case CURRENT_PLAYER:
      case ID:{
        orExpr();
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void skip() throws ParseException {/*@bgen(jjtree) SkipState */
  SkipState jjtn000 = new SkipState(JJTSKIPSTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(STATE_SKIP);
      jj_consume_token(LPAREN);
      switch (jj_nt.kind) {
      case LPAREN:
      case LBRACE:
      case NUMBER:
      case TEXT:
      case TRUE:
      case FALSE:
      case SPADES:
      case CLUBS:
      case HEARTS:
      case DIAMONDS:
      case ACE:
      case TWO:
      case THREE:
      case FOUR:
      case FIVE:
      case SIX:
      case SEVEN:
      case EIGHT:
      case NINE:
      case TEN:
      case JACK:
      case QUEEN:
      case KING:
      case NOT:
      case MINUS:
      case PLAY_ACTION:
      case MOVE_ACTION:
      case DEAL_ACTION:
      case PLAYER_CALL:
      case PILE_CALL:
      case CURRENT_PLAYER:
      case ID:{
        orExpr();
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void declaration() throws ParseException {/*@bgen(jjtree) Declaration */
  Declaration jjtn000 = new Declaration(JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      type();
      id();
      switch (jj_nt.kind) {
      case ASSIGN:{
        jj_consume_token(ASSIGN);
        orExpr();
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void assignment() throws ParseException {/*@bgen(jjtree) Assignment */
  Assignment jjtn000 = new Assignment(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_3(2)) {
        id();
        jj_consume_token(ARROW);
        id();
        jj_consume_token(ASSIGN);
        orExpr();
      } else {
        switch (jj_nt.kind) {
        case ID:{
          id();
          jj_consume_token(ASSIGN);
          orExpr();
          break;
          }
        case CURRENT_PLAYER:{
          currentPlayer();
          jj_consume_token(ARROW);
          id();
          jj_consume_token(ASSIGN);
          orExpr();
          break;
          }
        default:
          jj_la1[35] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ifStatement() throws ParseException {/*@bgen(jjtree) IfStatement */
  IfStatement jjtn000 = new IfStatement(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      jj_consume_token(LPAREN);
      orExpr();
      jj_consume_token(RPAREN);
      block();
      label_15:
      while (true) {
        if (jj_2_4(2)) {
          ;
        } else {
          break label_15;
        }
        elseIfStatement();
      }
      switch (jj_nt.kind) {
      case ELSE:{
        elseStatement();
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void elseIfStatement() throws ParseException {/*@bgen(jjtree) ElseIfStatement */
  ElseIfStatement jjtn000 = new ElseIfStatement(JJTELSEIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ELSE);
      jj_consume_token(IF);
      jj_consume_token(LPAREN);
      orExpr();
      jj_consume_token(RPAREN);
      block();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void elseStatement() throws ParseException {/*@bgen(jjtree) ElseStatement */
  ElseStatement jjtn000 = new ElseStatement(JJTELSESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ELSE);
      block();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void whileLoop() throws ParseException {/*@bgen(jjtree) WhileLoop */
  WhileLoop jjtn000 = new WhileLoop(JJTWHILELOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      orExpr();
      jj_consume_token(RPAREN);
      block();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void forEachLoop() throws ParseException {/*@bgen(jjtree) ForEachLoop */
  ForEachLoop jjtn000 = new ForEachLoop(JJTFOREACHLOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FOREACH);
      jj_consume_token(LPAREN);
      type();
      id();
      jj_consume_token(IN);
      orExpr();
      jj_consume_token(RPAREN);
      block();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void modifier() throws ParseException {/*@bgen(jjtree) Modifier */
  Modifier jjtn000 = new Modifier(JJTMODIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case MANDATORY:{
        mandatoryModifier();
        switch (jj_nt.kind) {
        case LESS_THAN:{
          repeatModifier();
          break;
          }
        default:
          jj_la1[37] = jj_gen;
          ;
        }
        break;
        }
      case LESS_THAN:{
        repeatModifier();
        break;
        }
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void mandatoryModifier() throws ParseException {/*@bgen(jjtree) MandatoryModifier */
  MandatoryModifier jjtn000 = new MandatoryModifier(JJTMANDATORYMODIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MANDATORY);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void repeatModifier() throws ParseException {/*@bgen(jjtree) RepeatModifier */
  RepeatModifier jjtn000 = new RepeatModifier(JJTREPEATMODIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(LESS_THAN);
      t = jj_consume_token(NUMBER);
      jj_consume_token(GREATER_THAN);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.jjtSetValue(Integer.parseInt(t.image));
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void comparator() throws ParseException {/*@bgen(jjtree) Comparator */
  Comparator jjtn000 = new Comparator(JJTCOMPARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token comparator = null;
    try {
      switch (jj_nt.kind) {
      case GREATER_THAN:{
        comparator = jj_consume_token(GREATER_THAN);
        break;
        }
      case GREATER_THAN_EQUAL:{
        comparator = jj_consume_token(GREATER_THAN_EQUAL);
        break;
        }
      case LESS_THAN:{
        comparator = jj_consume_token(LESS_THAN);
        break;
        }
      case LESS_THAN_EQUAL:{
        comparator = jj_consume_token(LESS_THAN_EQUAL);
        break;
        }
      case CONTAINS:{
        comparator = jj_consume_token(CONTAINS);
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.jjtSetValue(javacc.util.Operator.fromSymbol(comparator.image));
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void termOperator() throws ParseException {/*@bgen(jjtree) TermOperator */
  TermOperator jjtn000 = new TermOperator(JJTTERMOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token operator = null;
    try {
      switch (jj_nt.kind) {
      case PLUS:{
        operator = jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        operator = jj_consume_token(MINUS);
        break;
        }
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.jjtSetValue(javacc.util.Operator.fromSymbol(operator.image));
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void factorOperator() throws ParseException {/*@bgen(jjtree) FactorOperator */
  FactorOperator jjtn000 = new FactorOperator(JJTFACTOROPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token operator = null;
    try {
      switch (jj_nt.kind) {
      case MULTIPLY:{
        operator = jj_consume_token(MULTIPLY);
        break;
        }
      case DIVIDE:{
        operator = jj_consume_token(DIVIDE);
        break;
        }
      case MODULO:{
        operator = jj_consume_token(MODULO);
        break;
        }
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.jjtSetValue(javacc.util.Operator.fromSymbol(operator.image));
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void currentPlayer() throws ParseException {/*@bgen(jjtree) CurrentPlayer */
  CurrentPlayer jjtn000 = new CurrentPlayer(JJTCURRENTPLAYER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CURRENT_PLAYER);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void id() throws ParseException {/*@bgen(jjtree) Identifier */
  Identifier jjtn000 = new Identifier(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token i;
    try {
      i = jj_consume_token(ID);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.jjtSetValue(i.image);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void optionParam() throws ParseException {/*@bgen(jjtree) OptionParameter */
  OptionParameter jjtn000 = new OptionParameter(JJTOPTIONPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case PLAYER_TYPE:{
        playerType();
        break;
        }
      case CARD_TYPE:{
        cardType();
        break;
        }
      case SUIT_TYPE:{
        suitType();
        break;
        }
      case RANK_TYPE:{
        rankType();
        break;
        }
      case PILE_TYPE:{
        pileType();
        break;
        }
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      id();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void param() throws ParseException {/*@bgen(jjtree) Parameter */
  Parameter jjtn000 = new Parameter(JJTPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      type();
      id();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void type() throws ParseException {/*@bgen(jjtree) Type */
  Type jjtn000 = new Type(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case PLAYER_TYPE:{
        playerType();
        break;
        }
      case NUMBER_TYPE:{
        numberType();
        break;
        }
      case CARD_TYPE:{
        cardType();
        break;
        }
      case RANK_TYPE:{
        rankType();
        break;
        }
      case SUIT_TYPE:{
        suitType();
        break;
        }
      case SEQUENCE_TYPE:{
        sequenceType();
        break;
        }
      case PILE_TYPE:{
        pileType();
        break;
        }
      case BOOLEAN_TYPE:{
        booleanType();
        break;
        }
      case TEXT_TYPE:{
        textType();
        break;
        }
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void playerType() throws ParseException {/*@bgen(jjtree) PlayerType */
  PlayerType jjtn000 = new PlayerType(JJTPLAYERTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PLAYER_TYPE);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void numberType() throws ParseException {/*@bgen(jjtree) NumberType */
  NumberType jjtn000 = new NumberType(JJTNUMBERTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NUMBER_TYPE);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void cardType() throws ParseException {/*@bgen(jjtree) CardType */
  CardType jjtn000 = new CardType(JJTCARDTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CARD_TYPE);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void rankType() throws ParseException {/*@bgen(jjtree) RankType */
  RankType jjtn000 = new RankType(JJTRANKTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RANK_TYPE);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void suitType() throws ParseException {/*@bgen(jjtree) SuitType */
  SuitType jjtn000 = new SuitType(JJTSUITTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SUIT_TYPE);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void sequenceType() throws ParseException {/*@bgen(jjtree) SequenceType */
  SequenceType jjtn000 = new SequenceType(JJTSEQUENCETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SEQUENCE_TYPE);
      jj_consume_token(LESS_THAN);
      type();
      jj_consume_token(GREATER_THAN);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void pileType() throws ParseException {/*@bgen(jjtree) PileType */
  PileType jjtn000 = new PileType(JJTPILETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PILE_TYPE);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void booleanType() throws ParseException {/*@bgen(jjtree) BooleanType */
  BooleanType jjtn000 = new BooleanType(JJTBOOLEANTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BOOLEAN_TYPE);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void textType() throws ParseException {/*@bgen(jjtree) TextType */
  TextType jjtn000 = new TextType(JJTTEXTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TEXT_TYPE);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void call() throws ParseException {/*@bgen(jjtree) Call */
  Call jjtn000 = new Call(JJTCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case ID:{
        id();
        jj_consume_token(LPAREN);
        switch (jj_nt.kind) {
        case LPAREN:
        case LBRACE:
        case NUMBER:
        case TEXT:
        case TRUE:
        case FALSE:
        case SPADES:
        case CLUBS:
        case HEARTS:
        case DIAMONDS:
        case ACE:
        case TWO:
        case THREE:
        case FOUR:
        case FIVE:
        case SIX:
        case SEVEN:
        case EIGHT:
        case NINE:
        case TEN:
        case JACK:
        case QUEEN:
        case KING:
        case NOT:
        case MINUS:
        case PLAY_ACTION:
        case MOVE_ACTION:
        case DEAL_ACTION:
        case PLAYER_CALL:
        case PILE_CALL:
        case CURRENT_PLAYER:
        case ID:{
          orExpr();
          label_16:
          while (true) {
            switch (jj_nt.kind) {
            case COMMA:{
              ;
              break;
              }
            default:
              jj_la1[44] = jj_gen;
              break label_16;
            }
            jj_consume_token(COMMA);
            orExpr();
          }
          break;
          }
        default:
          jj_la1[45] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
        break;
        }
      case PLAY_ACTION:{
        playCall();
        break;
        }
      case DEAL_ACTION:{
        dealCall();
        break;
        }
      case MOVE_ACTION:{
        moveCall();
        break;
        }
      case PLAYER_CALL:{
        playerCall();
        break;
        }
      case PILE_CALL:{
        pileCall();
        break;
        }
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void literal() throws ParseException {/*@bgen(jjtree) Literal */
  Literal jjtn000 = new Literal(JJTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_5(2)) {
        cardLiteral();
      } else {
        switch (jj_nt.kind) {
        case TEXT:{
          textLiteral();
          break;
          }
        case NUMBER:{
          numberLiteral();
          break;
          }
        case SPADES:
        case CLUBS:
        case HEARTS:
        case DIAMONDS:{
          suitLiteral();
          break;
          }
        case ACE:
        case TWO:
        case THREE:
        case FOUR:
        case FIVE:
        case SIX:
        case SEVEN:
        case EIGHT:
        case NINE:
        case TEN:
        case JACK:
        case QUEEN:
        case KING:{
          rankLiteral();
          break;
          }
        case TRUE:
        case FALSE:{
          booleanLiteral();
          break;
          }
        case LBRACE:{
          sequenceLiteral();
          break;
          }
        default:
          jj_la1[47] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void textLiteral() throws ParseException {/*@bgen(jjtree) TextLiteral */
  TextLiteral jjtn000 = new TextLiteral(JJTTEXTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token text;
    try {
      text = jj_consume_token(TEXT);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.jjtSetValue(text.image.subSequence(1, text.image.length() -1));
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void rankLiteral() throws ParseException {/*@bgen(jjtree) RankLiteral */
  RankLiteral jjtn000 = new RankLiteral(JJTRANKLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token rank = null;
    try {
      switch (jj_nt.kind) {
      case ACE:{
        rank = jj_consume_token(ACE);
        break;
        }
      case TWO:{
        rank = jj_consume_token(TWO);
        break;
        }
      case THREE:{
        rank = jj_consume_token(THREE);
        break;
        }
      case FOUR:{
        rank = jj_consume_token(FOUR);
        break;
        }
      case FIVE:{
        rank = jj_consume_token(FIVE);
        break;
        }
      case SIX:{
        rank = jj_consume_token(SIX);
        break;
        }
      case SEVEN:{
        rank = jj_consume_token(SEVEN);
        break;
        }
      case EIGHT:{
        rank = jj_consume_token(EIGHT);
        break;
        }
      case NINE:{
        rank = jj_consume_token(NINE);
        break;
        }
      case TEN:{
        rank = jj_consume_token(TEN);
        break;
        }
      case JACK:{
        rank = jj_consume_token(JACK);
        break;
        }
      case QUEEN:{
        rank = jj_consume_token(QUEEN);
        break;
        }
      case KING:{
        rank = jj_consume_token(KING);
        break;
        }
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.jjtSetValue(rank.image);
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void cardLiteral() throws ParseException {/*@bgen(jjtree) CardLiteral */
  CardLiteral jjtn000 = new CardLiteral(JJTCARDLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      rankLiteral();
      jj_consume_token(OF);
      suitLiteral();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void booleanLiteral() throws ParseException {/*@bgen(jjtree) BooleanLiteral */
 BooleanLiteral jjtn000 = new BooleanLiteral(JJTBOOLEANLITERAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch (jj_nt.kind) {
      case FALSE:{
        t = jj_consume_token(FALSE);
jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
jjtn000.jjtSetValue(false);
        break;
        }
      case TRUE:{
        t = jj_consume_token(TRUE);
jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
jjtn000.jjtSetValue(true);
        break;
        }
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void suitLiteral() throws ParseException {/*@bgen(jjtree) SuitLiteral */
  SuitLiteral jjtn000 = new SuitLiteral(JJTSUITLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      switch (jj_nt.kind) {
      case SPADES:{
        t = jj_consume_token(SPADES);
        break;
        }
      case CLUBS:{
        t = jj_consume_token(CLUBS);
        break;
        }
      case HEARTS:{
        t = jj_consume_token(HEARTS);
        break;
        }
      case DIAMONDS:{
        t = jj_consume_token(DIAMONDS);
        break;
        }
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.jjtSetValue(t.image);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void sequenceLiteral() throws ParseException {/*@bgen(jjtree) SequenceLiteral */
  SequenceLiteral jjtn000 = new SequenceLiteral(JJTSEQUENCELITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACE);
      switch (jj_nt.kind) {
      case LPAREN:
      case LBRACE:
      case NUMBER:
      case TEXT:
      case TRUE:
      case FALSE:
      case SPADES:
      case CLUBS:
      case HEARTS:
      case DIAMONDS:
      case ACE:
      case TWO:
      case THREE:
      case FOUR:
      case FIVE:
      case SIX:
      case SEVEN:
      case EIGHT:
      case NINE:
      case TEN:
      case JACK:
      case QUEEN:
      case KING:
      case NOT:
      case MINUS:
      case PLAY_ACTION:
      case MOVE_ACTION:
      case DEAL_ACTION:
      case PLAYER_CALL:
      case PILE_CALL:
      case CURRENT_PLAYER:
      case ID:{
        orExpr();
        label_17:
        while (true) {
          switch (jj_nt.kind) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[51] = jj_gen;
            break label_17;
          }
          jj_consume_token(COMMA);
          orExpr();
        }
        break;
        }
      default:
        jj_la1[52] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void rangeLiteral() throws ParseException {/*@bgen(jjtree) RangeLiteral */
  RangeLiteral jjtn000 = new RangeLiteral(JJTRANGELITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      numberLiteral();
      jj_consume_token(RANGE);
      numberLiteral();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void numberLiteral() throws ParseException {/*@bgen(jjtree) NumberLiteral */
 NumberLiteral jjtn000 = new NumberLiteral(JJTNUMBERLITERAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NUMBER);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.jjtSetValue(Integer.parseInt(t.image));
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_3_1()
 {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_69()
 {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_68()
 {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_59()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_57()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_67()
 {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_66()
 {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_65()
 {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_64()
 {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_55()
 {
    if (jj_3R_57()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_58()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_32()
 {
    if (jj_scan_token(DEAL_ACTION)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_63()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_53()
 {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_36()
 {
    if (jj_3R_20()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_37()
 {
    if (jj_3R_39()) return true;
    if (jj_scan_token(ARROW)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_31()
 {
    if (jj_scan_token(PLAY_ACTION)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_29()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_20()) return true;
    if (jj_scan_token(ARROW)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_28()
 {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_20()
 {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_27()
 {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_50()
 {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_26()
 {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_25()
 {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_52()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(70)) jj_scanpos = xsp;
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_24()
 {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_33()
 {
    if (jj_scan_token(MOVE_ACTION)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_23()
 {
    if (jj_3R_20()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_18()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_39()
 {
    if (jj_scan_token(CURRENT_PLAYER)) return true;
    return false;
  }

  private boolean jj_3R_49()
 {
    if (jj_3R_52()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_53()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_48()
 {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_34()
 {
    if (jj_scan_token(PLAYER_CALL)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_71()
 {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_46()
 {
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  private boolean jj_3R_77()
 {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_56()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_47()
 {
    if (jj_3R_49()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_50()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_35()
 {
    if (jj_scan_token(PILE_CALL)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_45()
 {
    if (jj_3R_47()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_48()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_74()
 {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_54()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) return true;
    }
    return false;
  }

  private boolean jj_3R_44()
 {
    if (jj_3R_45()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_46()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_72()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_51()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_43()
 {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3R_76()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_42()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(67)) jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_75()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_73()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) return true;
    }
    return false;
  }

  private boolean jj_3R_41()
 {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  private boolean jj_3R_40()
 {
    if (jj_3R_42()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_43()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_22()
 {
    if (jj_3R_30()) return true;
    if (jj_scan_token(OF)) return true;
    return false;
  }

  private boolean jj_3R_38()
 {
    if (jj_3R_40()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_41()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_19()
 {
    if (jj_3R_29()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_30()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_58()
 {
    if (jj_scan_token(ARROW)) return true;
    return false;
  }

  private boolean jj_3R_70()
 {
    if (jj_scan_token(TEXT)) return true;
    return false;
  }

  private boolean jj_3R_62()
 {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_61()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_60()
 {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_21()
 {
    if (jj_scan_token(ELSE)) return true;
    if (jj_scan_token(IF)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public FlipParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[53];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xfc000900,0xfc000900,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x3100000,0x8000,0xfc000000,0x8000,0xfc000000,0xfc000800,0xff112000,0xff112000,0xff110000,0xff110000,0xfc000000,0xff110000,0x0,0x8000,0x400000,0x0,0xff110000,0x0,0x3110000,0x3110000,0x3110000,0x3110000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x74000000,0xfc000000,0x8000,0x3110000,0x0,0x3100000,0x0,0x0,0x0,0x8000,0x3110000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x7,0x7,0x8000000,0x4000000,0x0,0x40000000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x3fffe18,0x0,0x7,0x0,0x7,0x7,0x83fffe1f,0x83fffe1f,0x3fffeff,0x3fffeff,0x7,0x3fffe1f,0x80000000,0x0,0x0,0x0,0x3fffe1f,0x0,0x3fffe18,0x3fffe18,0x3fffe18,0x3fffe18,0x20000000,0x0,0x0,0x80000000,0x80000000,0x80000000,0x0,0x0,0x1,0x7,0x0,0x3fffe18,0x0,0x3fffe18,0x3ffe000,0x18,0x1e00,0x0,0x3fffe18,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x8,0x0,0x17,0x60,0x380,0x40,0x400,0x0,0x30000000,0x0,0x0,0x0,0x0,0x0,0x3bf5f848,0x3bf5f848,0x3015f848,0x3015f848,0x0,0x3015f848,0x8000000,0x0,0x0,0x150000,0x3000f848,0x3e00000,0x3000f848,0x3000f848,0x3000f848,0x3000f848,0x0,0x30000000,0x20000,0x0,0x8000000,0x17,0x60,0x380,0x0,0x0,0x0,0x3000f848,0x2000f800,0x0,0x0,0x0,0x0,0x0,0x3000f848,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[5];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public FlipParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public FlipParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new FlipParserTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 53; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 53; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public FlipParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new FlipParserTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 53; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 53; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public FlipParser(FlipParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 53; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(FlipParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 53; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken = token;
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    jj_nt = token;
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[94];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 53; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 94; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 5; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
