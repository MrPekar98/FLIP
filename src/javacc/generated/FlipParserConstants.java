/* Generated By:JJTree&JavaCC: Do not edit this line. FlipParserConstants.java */
package javacc.generated;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface FlipParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SETUP = 7;
  /** RegularExpression Id. */
  int STAGE = 8;
  /** RegularExpression Id. */
  int TO = 9;
  /** RegularExpression Id. */
  int CONDITION = 10;
  /** RegularExpression Id. */
  int ACTION = 11;
  /** RegularExpression Id. */
  int FUNCTION = 12;
  /** RegularExpression Id. */
  int OPTION = 13;
  /** RegularExpression Id. */
  int SEMICOLON = 14;
  /** RegularExpression Id. */
  int COMMA = 15;
  /** RegularExpression Id. */
  int LPAREN = 16;
  /** RegularExpression Id. */
  int RPAREN = 17;
  /** RegularExpression Id. */
  int LBRACKET = 18;
  /** RegularExpression Id. */
  int RBRACKET = 19;
  /** RegularExpression Id. */
  int LBRACE = 20;
  /** RegularExpression Id. */
  int RBRACE = 21;
  /** RegularExpression Id. */
  int COLON = 22;
  /** RegularExpression Id. */
  int RANGE = 23;
  /** RegularExpression Id. */
  int NUMBER = 24;
  /** RegularExpression Id. */
  int TEXT = 25;
  /** RegularExpression Id. */
  int PLAYER_TYPE = 26;
  /** RegularExpression Id. */
  int NUMBER_TYPE = 27;
  /** RegularExpression Id. */
  int CARD_TYPE = 28;
  /** RegularExpression Id. */
  int SUIT_TYPE = 29;
  /** RegularExpression Id. */
  int RANK_TYPE = 30;
  /** RegularExpression Id. */
  int SEQUENCE_TYPE = 31;
  /** RegularExpression Id. */
  int PILE_TYPE = 32;
  /** RegularExpression Id. */
  int BOOLEAN_TYPE = 33;
  /** RegularExpression Id. */
  int TEXT_TYPE = 34;
  /** RegularExpression Id. */
  int TRUE = 35;
  /** RegularExpression Id. */
  int FALSE = 36;
  /** RegularExpression Id. */
  int PLAYER_COUNT = 37;
  /** RegularExpression Id. */
  int PLAYER_DEF = 38;
  /** RegularExpression Id. */
  int PILE_DEF = 39;
  /** RegularExpression Id. */
  int OF = 40;
  /** RegularExpression Id. */
  int SPADES = 41;
  /** RegularExpression Id. */
  int CLUBS = 42;
  /** RegularExpression Id. */
  int HEARTS = 43;
  /** RegularExpression Id. */
  int DIAMONDS = 44;
  /** RegularExpression Id. */
  int ACE = 45;
  /** RegularExpression Id. */
  int TWO = 46;
  /** RegularExpression Id. */
  int THREE = 47;
  /** RegularExpression Id. */
  int FOUR = 48;
  /** RegularExpression Id. */
  int FIVE = 49;
  /** RegularExpression Id. */
  int SIX = 50;
  /** RegularExpression Id. */
  int SEVEN = 51;
  /** RegularExpression Id. */
  int EIGHT = 52;
  /** RegularExpression Id. */
  int NINE = 53;
  /** RegularExpression Id. */
  int TEN = 54;
  /** RegularExpression Id. */
  int JACK = 55;
  /** RegularExpression Id. */
  int QUEEN = 56;
  /** RegularExpression Id. */
  int KING = 57;
  /** RegularExpression Id. */
  int AND = 58;
  /** RegularExpression Id. */
  int OR = 59;
  /** RegularExpression Id. */
  int XOR = 60;
  /** RegularExpression Id. */
  int ASSIGN = 61;
  /** RegularExpression Id. */
  int EQUALS = 62;
  /** RegularExpression Id. */
  int LESS_THAN = 63;
  /** RegularExpression Id. */
  int LESS_THAN_EQUAL = 64;
  /** RegularExpression Id. */
  int GREATER_THAN = 65;
  /** RegularExpression Id. */
  int GREATER_THAN_EQUAL = 66;
  /** RegularExpression Id. */
  int NOT = 67;
  /** RegularExpression Id. */
  int CONTAINS = 68;
  /** RegularExpression Id. */
  int PLUS = 69;
  /** RegularExpression Id. */
  int MINUS = 70;
  /** RegularExpression Id. */
  int DIVIDE = 71;
  /** RegularExpression Id. */
  int MULTIPLY = 72;
  /** RegularExpression Id. */
  int MODULO = 73;
  /** RegularExpression Id. */
  int ARROW = 74;
  /** RegularExpression Id. */
  int PLAY_ACTION = 75;
  /** RegularExpression Id. */
  int MOVE_ACTION = 76;
  /** RegularExpression Id. */
  int DEAL_ACTION = 77;
  /** RegularExpression Id. */
  int PLAYER_CALL = 78;
  /** RegularExpression Id. */
  int PILE_CALL = 79;
  /** RegularExpression Id. */
  int IF = 80;
  /** RegularExpression Id. */
  int ELSE = 81;
  /** RegularExpression Id. */
  int FOREACH = 82;
  /** RegularExpression Id. */
  int IN = 83;
  /** RegularExpression Id. */
  int WHILE = 84;
  /** RegularExpression Id. */
  int STATE_DONE = 85;
  /** RegularExpression Id. */
  int STATE_NEXT = 86;
  /** RegularExpression Id. */
  int STATE_OUT = 87;
  /** RegularExpression Id. */
  int STATE_WIN = 88;
  /** RegularExpression Id. */
  int STATE_SKIP = 89;
  /** RegularExpression Id. */
  int RETURN = 90;
  /** RegularExpression Id. */
  int MANDATORY = 91;
  /** RegularExpression Id. */
  int CURRENT_PLAYER = 92;
  /** RegularExpression Id. */
  int ID = 93;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "\"Setup\"",
    "\"Stage\"",
    "\"to\"",
    "\"Condition\"",
    "\"Action\"",
    "\"Function\"",
    "\"Option\"",
    "\";\"",
    "\",\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\":\"",
    "\"..\"",
    "<NUMBER>",
    "<TEXT>",
    "\"Player\"",
    "\"Number\"",
    "\"Card\"",
    "\"Suit\"",
    "\"Rank\"",
    "\"Sequence\"",
    "\"Pile\"",
    "\"Boolean\"",
    "\"Text\"",
    "\"true\"",
    "\"false\"",
    "\"PlayerCount\"",
    "\"DefinePlayer\"",
    "\"DefinePiles\"",
    "\"of\"",
    "\"spades\"",
    "\"clubs\"",
    "\"hearts\"",
    "\"diamonds\"",
    "\"ace\"",
    "\"two\"",
    "\"three\"",
    "\"four\"",
    "\"five\"",
    "\"six\"",
    "\"seven\"",
    "\"eight\"",
    "\"nine\"",
    "\"ten\"",
    "\"jack\"",
    "\"queen\"",
    "\"king\"",
    "\"and\"",
    "\"or\"",
    "\"xor\"",
    "\":=\"",
    "\"=\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"not\"",
    "\"contains\"",
    "\"+\"",
    "\"-\"",
    "\"/\"",
    "\"*\"",
    "\"mod\"",
    "\"->\"",
    "\"play\"",
    "\"move\"",
    "\"deal\"",
    "\"player\"",
    "\"pile\"",
    "\"if\"",
    "\"else\"",
    "\"for\"",
    "\"in\"",
    "\"while\"",
    "\"done\"",
    "\"next\"",
    "\"out\"",
    "\"win\"",
    "\"skip\"",
    "\"return\"",
    "\"mandatory\"",
    "\"CurrentPlayer\"",
    "<ID>",
  };

}
