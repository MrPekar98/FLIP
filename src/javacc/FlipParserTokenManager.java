/* FlipParserTokenManager.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. FlipParserTokenManager.java */
package javacc.generated;
import java.io.File;
import java.io.Reader;
import java.io.IOException;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import javacc.util.TreePrinter;
import javacc.visitors.FixExpressionsVisitor;
import javacc.visitors.PrintingVisitor;
import javacc.visitors.TypeCheckerVisitor;
import javacc.visitors.codegeneration.CodeGenerationVisitor;
import org.apache.log4j.Logger;

/** Token Manager. */
@SuppressWarnings("unused")public class FlipParserTokenManager implements FlipParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active1 & 0x80L) != 0L)
            return 11;
         if ((active0 & 0x1ffffffffc003f80L) != 0L || (active1 & 0x1ffffa18L) != 0L)
         {
            jjmatchedKind = 93;
            return 9;
         }
         return -1;
      case 1:
         if ((active0 & 0x17fffefffc003d80L) != 0L || (active1 & 0x1ff6fa18L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 1;
            return 9;
         }
         if ((active0 & 0x800010000000200L) != 0L || (active1 & 0x90000L) != 0L)
            return 9;
         return -1;
      case 2:
         if ((active0 & 0x3bb9efffc003d80L) != 0L || (active1 & 0x1e72f810L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 2;
            return 9;
         }
         if ((active0 & 0x1444600000000000L) != 0L || (active1 & 0x1840208L) != 0L)
            return 9;
         return -1;
      case 3:
         if ((active0 & 0x1189ef28c003d80L) != 0L || (active1 & 0x1c100010L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 93;
               jjmatchedPos = 3;
            }
            return 9;
         }
         if ((active0 & 0x2a3000d70000000L) != 0L || (active1 & 0x262f800L) != 0L)
            return 9;
         return -1;
      case 4:
         if ((active0 & 0x1ae28c003c00L) != 0L || (active1 & 0x1c004010L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 4;
            return 9;
         }
         if ((active0 & 0x118841000000180L) != 0L || (active1 & 0x100000L) != 0L)
            return 9;
         return -1;
      case 5:
         if ((active0 & 0x10c280001400L) != 0L || (active1 & 0x18000010L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 93;
               jjmatchedPos = 5;
            }
            return 9;
         }
         if ((active0 & 0xa200c002800L) != 0L || (active1 & 0x4004000L) != 0L)
            return 9;
         return -1;
      case 6:
         if ((active0 & 0x10e080001400L) != 0L || (active1 & 0x18000010L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 6;
            return 9;
         }
         if ((active0 & 0x200000000L) != 0L)
            return 9;
         return -1;
      case 7:
         if ((active0 & 0xe000000400L) != 0L || (active1 & 0x18000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 7;
            return 9;
         }
         if ((active0 & 0x100080001000L) != 0L || (active1 & 0x10L) != 0L)
            return 9;
         return -1;
      case 8:
         if ((active0 & 0xe000000000L) != 0L || (active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 8;
            return 9;
         }
         if ((active0 & 0x400L) != 0L || (active1 & 0x8000000L) != 0L)
            return 9;
         return -1;
      case 9:
         if ((active0 & 0xe000000000L) != 0L || (active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 9;
            return 9;
         }
         return -1;
      case 10:
         if ((active0 & 0x4000000000L) != 0L || (active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 10;
            return 9;
         }
         if ((active0 & 0xa000000000L) != 0L)
            return 9;
         return -1;
      case 11:
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 11;
            return 9;
         }
         if ((active0 & 0x4000000000L) != 0L)
            return 9;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 16);
      case 41:
         return jjStopAtPos(0, 17);
      case 42:
         return jjStopAtPos(0, 72);
      case 43:
         return jjStopAtPos(0, 69);
      case 44:
         return jjStopAtPos(0, 15);
      case 45:
         jjmatchedKind = 70;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400L);
      case 46:
         return jjMoveStringLiteralDfa1_0(0x800000L, 0x0L);
      case 47:
         return jjStartNfaWithStates_0(0, 71, 11);
      case 58:
         jjmatchedKind = 22;
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x0L);
      case 59:
         return jjStopAtPos(0, 14);
      case 60:
         jjmatchedKind = 63;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1L);
      case 61:
         return jjStopAtPos(0, 62);
      case 62:
         jjmatchedKind = 65;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4L);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x800L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x10000400L, 0x10000000L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0xc000000000L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x1000L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x8000000L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x2000L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x2104000000L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x40000000L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0xa0000180L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 18);
      case 93:
         return jjStopAtPos(0, 19);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x400200000000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x10L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x202000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x20000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x3001000000000L, 0x40000L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x90000L);
      case 106:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x0L);
      case 107:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8001200L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x400008L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x800010000000000L, 0x800000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc800L);
      case 113:
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0xc020000000000L, 0x2000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x40c00800000200L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1100000L);
      case 120:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 20);
      case 125:
         return jjStopAtPos(0, 21);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 46:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         break;
      case 61:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         else if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         else if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(1, 66);
         break;
      case 62:
         if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(1, 74);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x80001050000000L, active1, 0x8000000L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000800L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x4808c480000080L, active1, 0x4402000L);
      case 102:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 40, 9);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(1, 80, 9);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L, active1, 0x100000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x236100100000000L, active1, 0x1008000L);
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x42004000000L, active1, 0x24800L);
      case 110:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(1, 83, 9);
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0L);
      case 111:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(1, 9, 9);
         return jjMoveStringLiteralDfa2_0(active0, 0x1001000200000400L, active1, 0x241218L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000002000L, active1, 0L);
      case 114:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 59, 9);
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000028001000L, active1, 0x10800000L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x1a2004000100L, active1, 0x6800L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L, active1, 0L);
      case 100:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 58, 9);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 73, 9);
         break;
      case 101:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 45, 9);
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0xc000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L, active1, 0x2100000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x1100000000L, active1, 0x8000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L, active1, 0L);
      case 110:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 54, 9);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 88, 9);
         return jjMoveStringLiteralDfa3_0(active0, 0x220000040001400L, active1, 0x8200010L);
      case 111:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 46, 9);
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L, active1, 0L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L, active1, 0L);
      case 114:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 60, 9);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 82, 9);
         return jjMoveStringLiteralDfa3_0(active0, 0x800010000000L, active1, 0x10000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20000L);
      case 116:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(2, 67, 9);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 87, 9);
         return jjMoveStringLiteralDfa3_0(active0, 0x2880L, active1, 0x4000000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x1040800000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0xa000000000000L, active1, 0x1000L);
      case 120:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 50, 9);
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L, active1, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x40008000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L, active1, 0L);
      case 100:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 9);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000400L, active1, 0x8000000L);
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 9);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 9);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 49, 9);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 53, 9);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 76, 9);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 79, 9);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 81, 9);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 85, 9);
         return jjMoveStringLiteralDfa4_0(active0, 0x108800000000000L, active1, 0L);
      case 103:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 57, 9);
         return jjMoveStringLiteralDfa4_0(active0, 0x100L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0xc000002800L, active1, 0L);
      case 107:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 9);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 55, 9);
         break;
      case 108:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 77, 9);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L, active1, 0x100000L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L, active1, 0L);
      case 112:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 89, 9);
         break;
      case 114:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 48, 9);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L, active1, 0x10000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 9);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 9);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 86, 9);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000080L, active1, 0x4000000L);
      case 121:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x2004000000L, active1, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000010L);
      case 101:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 8, 9);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 9);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 47, 9);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 84, 9);
         return jjMoveStringLiteralDfa5_0(active0, 0x2228c000000L, active1, 0x10004000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x400L, active1, 0L);
      case 110:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 51, 9);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 56, 9);
         return jjMoveStringLiteralDfa5_0(active0, 0xc000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000002800L, active1, 0L);
      case 112:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 7, 9);
         break;
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000L);
      case 115:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 42, 9);
         break;
      case 116:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 52, 9);
         return jjMoveStringLiteralDfa5_0(active0, 0x80000001000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0xc000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L, active1, 0x10L);
      case 110:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 11, 9);
         else if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 13, 9);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 90, 9);
         return jjMoveStringLiteralDfa6_0(active0, 0x100080000000L, active1, 0x10000000L);
      case 114:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 27, 9);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 78, 9);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 41, 9);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 9);
         break;
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x400L, active1, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0xc000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x400L, active1, 0L);
      case 110:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 33, 9);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L, active1, 0x8000000L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 80:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10000000L);
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(7, 31, 9);
         break;
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(7, 12, 9);
         break;
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000400L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000000L);
      case 115:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 44, 9);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(7, 68, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000L, active1, 0x10000000L);
      case 110:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(8, 10, 9);
         break;
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000L, active1, 0L);
      case 121:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(8, 91, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x10000000L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 39, 9);
         break;
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 37, 9);
         break;
      case 121:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x10000000L);
      case 114:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 38, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, 0L, active1);
      return 12;
   }
   switch(curChar)
   {
      case 114:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(12, 92, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, 0L, active1);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 22;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 24)
                        kind = 24;
                     { jjCheckNAdd(2); }
                  }
                  else if (curChar == 47)
                     { jjAddStates(0, 1); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  else if (curChar == 48)
                  {
                     if (kind > 24)
                        kind = 24;
                  }
                  break;
               case 11:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(17, 18); }
                  else if (curChar == 47)
                     { jjCheckNAddStates(5, 7); }
                  break;
               case 1:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  { jjCheckNAdd(2); }
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  { jjCheckNAdd(2); }
                  break;
               case 3:
               case 5:
                  if (curChar == 34)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 6:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 7:
                  if (curChar == 34 && kind > 25)
                     kind = 25;
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 10:
                  if (curChar == 47)
                     { jjAddStates(0, 1); }
                  break;
               case 12:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(5, 7); }
                  break;
               case 13:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 14:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 15:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(17, 18); }
                  break;
               case 17:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(17, 18); }
                  break;
               case 18:
                  if (curChar == 42)
                     { jjCheckNAddStates(8, 10); }
                  break;
               case 19:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(20, 18); }
                  break;
               case 20:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(20, 18); }
                  break;
               case 21:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 9:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAdd(9); }
                  break;
               case 4:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if ((0x4400010000000L & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 6:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 12:
                  { jjAddStates(5, 7); }
                  break;
               case 17:
                  { jjCheckNAddTwoStates(17, 18); }
                  break;
               case 19:
               case 20:
                  { jjCheckNAddTwoStates(20, 18); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 6:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(2, 4); }
                  break;
               case 12:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(5, 7); }
                  break;
               case 17:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(17, 18); }
                  break;
               case 19:
               case 20:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(20, 18); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 22 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   11, 16, 4, 6, 7, 12, 13, 15, 18, 19, 21, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, "\123\145\164\165\160", 
"\123\164\141\147\145", "\164\157", "\103\157\156\144\151\164\151\157\156", 
"\101\143\164\151\157\156", "\106\165\156\143\164\151\157\156", "\117\160\164\151\157\156", "\73", "\54", 
"\50", "\51", "\133", "\135", "\173", "\175", "\72", "\56\56", null, null, 
"\120\154\141\171\145\162", "\116\165\155\142\145\162", "\103\141\162\144", "\123\165\151\164", 
"\122\141\156\153", "\123\145\161\165\145\156\143\145", "\120\151\154\145", 
"\102\157\157\154\145\141\156", "\124\145\170\164", "\164\162\165\145", "\146\141\154\163\145", 
"\120\154\141\171\145\162\103\157\165\156\164", "\104\145\146\151\156\145\120\154\141\171\145\162", 
"\104\145\146\151\156\145\120\151\154\145\163", "\157\146", "\163\160\141\144\145\163", "\143\154\165\142\163", 
"\150\145\141\162\164\163", "\144\151\141\155\157\156\144\163", "\141\143\145", "\164\167\157", 
"\164\150\162\145\145", "\146\157\165\162", "\146\151\166\145", "\163\151\170", 
"\163\145\166\145\156", "\145\151\147\150\164", "\156\151\156\145", "\164\145\156", 
"\152\141\143\153", "\161\165\145\145\156", "\153\151\156\147", "\141\156\144", "\157\162", 
"\170\157\162", "\72\75", "\75", "\74", "\74\75", "\76", "\76\75", "\156\157\164", 
"\143\157\156\164\141\151\156\163", "\53", "\55", "\57", "\52", "\155\157\144", "\55\76", "\160\154\141\171", 
"\155\157\166\145", "\144\145\141\154", "\160\154\141\171\145\162", "\160\151\154\145", 
"\151\146", "\145\154\163\145", "\146\157\162", "\151\156", "\167\150\151\154\145", 
"\144\157\156\145", "\156\145\170\164", "\157\165\164", "\167\151\156", "\163\153\151\160", 
"\162\145\164\165\162\156", "\155\141\156\144\141\164\157\162\171", 
"\103\165\162\162\145\156\164\120\154\141\171\145\162", null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public FlipParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public FlipParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 22; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffff81L, 0x3fffffffL, 
};
static final long[] jjtoSkip = {
   0x7eL, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[22];
    private final int[] jjstateSet = new int[2 * 22];

    
    protected char curChar;
}
